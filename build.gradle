plugins {
    id 'java'
    id 'application'
}

mainClassName = 'sh.calaba.screenshot.ScreenshotTaker'

sourceSets {
    intTest {
        java.srcDir file('src/intTest/java')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    compile fileTree(dir: 'lib', include: '*.jar')
    testCompile 'junit:junit:4.12'
}

repositories {
    jcenter()
}

jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }

    manifest {
        attributes 'Main-Class': 'sh.calaba.screenshot.ScreenshotTaker'
    }

    baseName = 'screenshotTaker'
}

task integrationTest(type: JavaExec) {


    def imageFromAppFileName = 'screenshotTakerTest.png'
    def imageFromAdbFileName = 'adbScreenshotTest.png'

    doFirst {
        if (!project.hasProperty('deviceSerial')) {
            throw new GradleException('deviceSerial property value must be provided for the task. Usage: gradlew integrationTest -PdeviceSerial=<your-device-serial>')
        }

        def androidHome = System.getenv('ANDROID_HOME')
        if (androidHome == null) {
            throw new GradleException('ANDROID_HOME environment variable must be set to proper Android SDK location before executiong this test')
        }

        def adb = new File(androidHome, 'platform-tools/adb')
        def jar = new File(rootDir, 'screenshotTaker.jar')

        javaexec {
            main = "-jar"
            args = [jar, deviceSerial, new File(rootDir, imageFromAppFileName)]
        }

        def pathOnDevice = "/sdcard/$imageFromAdbFileName"
        exec {
            commandLine adb, '-s', deviceSerial, 'shell', 'screencap', pathOnDevice
        }
        exec {
            commandLine adb, '-s', deviceSerial, 'pull', pathOnDevice, new File(rootDir, imageFromAdbFileName)
        }
    }

    description = 'Runs integration tests.'
    group = 'verification'

    main = 'src.ScreenshotTakerTest'
    classpath = sourceSets.intTest.runtimeClasspath
    args = [imageFromAppFileName, imageFromAdbFileName]

    dependsOn build
}

tasks.withType(Jar) {
    destinationDir = rootDir
}